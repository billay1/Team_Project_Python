{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb703215",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "# Team Assingment\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e6f5b8c",
   "metadata": {},
   "source": [
    "### Importing packages and excel file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e9dddde5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>type_employment</th>\n",
       "      <th>workinghours_week</th>\n",
       "      <th>capital_gain_loss</th>\n",
       "      <th>level_education</th>\n",
       "      <th>years_education</th>\n",
       "      <th>civil_status</th>\n",
       "      <th>relationship</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>gender</th>\n",
       "      <th>nationality</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>31</td>\n",
       "      <td>Machine-op-inspct</td>\n",
       "      <td>Private</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>Bachelors</td>\n",
       "      <td>13</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Husband</td>\n",
       "      <td>Other</td>\n",
       "      <td>Male</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>Adm-clerical</td>\n",
       "      <td>Private</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Divorced</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Female</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Private</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Never-married</td>\n",
       "      <td>Not-in-family</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>39</td>\n",
       "      <td>Handlers-cleaners</td>\n",
       "      <td>Private</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>50</td>\n",
       "      <td>Farming-fishing</td>\n",
       "      <td>Private</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>HS-grad</td>\n",
       "      <td>9</td>\n",
       "      <td>Married-civ-spouse</td>\n",
       "      <td>Husband</td>\n",
       "      <td>White</td>\n",
       "      <td>Male</td>\n",
       "      <td>United-States</td>\n",
       "      <td>&lt;=50K</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age                job type_employment  workinghours_week  \\\n",
       "0   31  Machine-op-inspct         Private                 36   \n",
       "1   49       Adm-clerical         Private                 35   \n",
       "2   25  Handlers-cleaners         Private                 45   \n",
       "3   39  Handlers-cleaners         Private                 40   \n",
       "4   50    Farming-fishing         Private                 50   \n",
       "\n",
       "   capital_gain_loss level_education  years_education        civil_status  \\\n",
       "0                  0       Bachelors               13  Married-civ-spouse   \n",
       "1                  0         HS-grad                9            Divorced   \n",
       "2                  0         HS-grad                9       Never-married   \n",
       "3                  0         HS-grad                9  Married-civ-spouse   \n",
       "4                  0         HS-grad                9  Married-civ-spouse   \n",
       "\n",
       "    relationship ethnicity  gender    nationality income  \n",
       "0        Husband     Other    Male         Mexico  <=50K  \n",
       "1  Not-in-family     White  Female  United-States  <=50K  \n",
       "2  Not-in-family     White    Male  United-States  <=50K  \n",
       "3        Husband     White    Male  United-States  <=50K  \n",
       "4        Husband     White    Male  United-States  <=50K  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd#importing the pandas library\n",
    "from os import listdir#importing the os library\n",
    "import matplotlib.pyplot as plt #importing the managing of the plots library\n",
    "import seaborn as sns #importing the chart library\n",
    "import statsmodels.formula.api as smf # regression modeling\n",
    "from sklearn.model_selection import train_test_split # train/test split\n",
    "#for i in listdir(path=\".\"):\n",
    "#    print (i) \n",
    "#importing the csv file\n",
    "file = \"./Team 4 - US Census Above 50k Predictor.csv\"\n",
    "#making the headers of the csv file and store into a list variable\n",
    "headers = [\"age\", \"job\", \"type_employment\", \"workinghours_week\", \n",
    "           \"capital_gain_loss\", \"level_education\", \"years_education\", \n",
    "           \"civil_status\", \"relationship\", \"ethnicity\",\n",
    "           \"gender\", \"nationality\",\n",
    "          \"income\"]\n",
    "#make the read_csv file to read the csv \n",
    "census = pd.read_csv(filepath_or_buffer = file,\n",
    "                    sep = ',', #separators by coma\n",
    "                    header = 0, #headers in the first row\n",
    "                    skipinitialspace = True, #skip the initial value for the '?' symbol\n",
    "                    names = headers, #asigning the names of the headers\n",
    "                    na_values = ['', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',\n",
    "        '1.#IND', '1.#QNAN', '<NA>', 'N/A' 'NA', 'NULL', 'NaN', 'n/a',\n",
    "        'nan', 'null','?']) #declaring all the possible missing values\n",
    "#exporting the first 5 values of the dataset\n",
    "census.head(n = 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e6200ef",
   "metadata": {},
   "source": [
    "### Types of data for each column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c87d84c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 28386 entries, 0 to 28385\n",
      "Data columns (total 13 columns):\n",
      " #   Column             Non-Null Count  Dtype \n",
      "---  ------             --------------  ----- \n",
      " 0   age                28386 non-null  int64 \n",
      " 1   job                26911 non-null  object\n",
      " 2   type_employment    26917 non-null  object\n",
      " 3   workinghours_week  28386 non-null  int64 \n",
      " 4   capital_gain_loss  28386 non-null  int64 \n",
      " 5   level_education    28386 non-null  object\n",
      " 6   years_education    28386 non-null  int64 \n",
      " 7   civil_status       28386 non-null  object\n",
      " 8   relationship       28386 non-null  object\n",
      " 9   ethnicity          28386 non-null  object\n",
      " 10  gender             28386 non-null  object\n",
      " 11  nationality        27914 non-null  object\n",
      " 12  income             28386 non-null  object\n",
      "dtypes: int64(4), object(9)\n",
      "memory usage: 2.8+ MB\n"
     ]
    }
   ],
   "source": [
    "#analysing the information\n",
    "census.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d58c4e9f",
   "metadata": {},
   "source": [
    "### Finding missing values to improve analysis and percentage of missing values per column to see if they are meaningful portion of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "01722681",
   "metadata": {
    "cell_style": "split",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total missing values per column:\n",
      "**************************************************\n",
      "age                     0\n",
      "job                  1475\n",
      "type_employment      1469\n",
      "workinghours_week       0\n",
      "capital_gain_loss       0\n",
      "level_education         0\n",
      "years_education         0\n",
      "civil_status            0\n",
      "relationship            0\n",
      "ethnicity               0\n",
      "gender                  0\n",
      "nationality           472\n",
      "income                  0\n",
      "dtype: int64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#calculating the total missing values per colum\n",
    "print(f\"\"\"\n",
    "Total missing values per column:\n",
    "{'*' * 50}\n",
    "{census.isnull().sum(axis = 0)}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d7c14a62",
   "metadata": {
    "cell_style": "split"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Percentage of missing values per every column\n",
      "**************************************************\n",
      "age                  0.0\n",
      "job                  5.0\n",
      "type_employment      5.0\n",
      "workinghours_week    0.0\n",
      "capital_gain_loss    0.0\n",
      "level_education      0.0\n",
      "years_education      0.0\n",
      "civil_status         0.0\n",
      "relationship         0.0\n",
      "ethnicity            0.0\n",
      "gender               0.0\n",
      "nationality          2.0\n",
      "income               0.0\n",
      "dtype: float64 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "#the percentage of missing values per each column\n",
    "print(f\"\"\"\n",
    "Percentage of missing values per every column\n",
    "{'*' * 50}\n",
    "{census.isnull().mean(axis = 0).round(decimals = 2)*100} \n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7867a0f6",
   "metadata": {},
   "source": [
    "### Representative portion of the missing values per categorical column's unique values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a3e4edb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Frequencies of the categorical values\n",
      "**************************************************\n",
      "**************************************************\n",
      "**************************************************\n",
      "Armed-Forces          0.0\n",
      "Priv-house-serv       1.0\n",
      "Protective-serv       2.0\n",
      "Tech-support          3.0\n",
      "Farming-fishing       3.0\n",
      "Handlers-cleaners     4.0\n",
      "Transport-moving      5.0\n",
      "Machine-op-inspct     7.0\n",
      "Other-service        11.0\n",
      "Sales                12.0\n",
      "Adm-clerical         12.0\n",
      "Exec-managerial      13.0\n",
      "Craft-repair         13.0\n",
      "Prof-specialty       14.0\n",
      "Name: job, dtype: float64\n",
      "**************************************************\n",
      "Never-worked         0.0\n",
      "Without-pay          0.0\n",
      "Federal-gov          3.0\n",
      "Self-emp-inc         4.0\n",
      "State-gov            4.0\n",
      "Local-gov            7.0\n",
      "Self-emp-not-inc     8.0\n",
      "Private             74.0\n",
      "Name: type_employment, dtype: float64\n",
      "**************************************************\n",
      "Preschool        0.0\n",
      "1st-4th          1.0\n",
      "5th-6th          1.0\n",
      "Doctorate        1.0\n",
      "12th             1.0\n",
      "9th              2.0\n",
      "Prof-school      2.0\n",
      "7th-8th          2.0\n",
      "10th             3.0\n",
      "Assoc-acdm       3.0\n",
      "11th             4.0\n",
      "Assoc-voc        4.0\n",
      "Masters          5.0\n",
      "Bachelors       16.0\n",
      "Some-college    22.0\n",
      "HS-grad         32.0\n",
      "Name: level_education, dtype: float64\n",
      "**************************************************\n",
      "Married-AF-spouse         0.0\n",
      "Married-spouse-absent     1.0\n",
      "Widowed                   3.0\n",
      "Separated                 3.0\n",
      "Divorced                 14.0\n",
      "Never-married            33.0\n",
      "Married-civ-spouse       46.0\n",
      "Name: civil_status, dtype: float64\n",
      "**************************************************\n",
      "Other-relative     3.0\n",
      "Wife               5.0\n",
      "Unmarried         11.0\n",
      "Own-child         16.0\n",
      "Not-in-family     26.0\n",
      "Husband           40.0\n",
      "Name: relationship, dtype: float64\n",
      "**************************************************\n",
      "Other                  1.0\n",
      "Amer-Indian-Eskimo     1.0\n",
      "Asian-Pac-Islander     3.0\n",
      "Black                 10.0\n",
      "White                 85.0\n",
      "Name: ethnicity, dtype: float64\n",
      "**************************************************\n",
      "Female    33.0\n",
      "Male      67.0\n",
      "Name: gender, dtype: float64\n",
      "**************************************************\n",
      "Holand-Netherlands             0.0\n",
      "Scotland                       0.0\n",
      "Honduras                       0.0\n",
      "Hungary                        0.0\n",
      "Outlying-US(Guam-USVI-etc)     0.0\n",
      "Laos                           0.0\n",
      "Cambodia                       0.0\n",
      "Yugoslavia                     0.0\n",
      "Trinadad&Tobago                0.0\n",
      "Thailand                       0.0\n",
      "Hong                           0.0\n",
      "France                         0.0\n",
      "Ireland                        0.0\n",
      "Greece                         0.0\n",
      "Ecuador                        0.0\n",
      "Peru                           0.0\n",
      "Portugal                       0.0\n",
      "Nicaragua                      0.0\n",
      "Haiti                          0.0\n",
      "Iran                           0.0\n",
      "Taiwan                         0.0\n",
      "Japan                          0.0\n",
      "Columbia                       0.0\n",
      "Poland                         0.0\n",
      "Vietnam                        0.0\n",
      "Guatemala                      0.0\n",
      "Dominican-Republic             0.0\n",
      "Jamaica                        0.0\n",
      "Italy                          0.0\n",
      "China                          0.0\n",
      "South                          0.0\n",
      "England                        0.0\n",
      "Cuba                           0.0\n",
      "India                          0.0\n",
      "El-Salvador                    0.0\n",
      "Puerto-Rico                    0.0\n",
      "Canada                         0.0\n",
      "Germany                        0.0\n",
      "Philippines                    1.0\n",
      "Mexico                         2.0\n",
      "United-States                 91.0\n",
      "Name: nationality, dtype: float64\n",
      "**************************************************\n",
      ">50K     24.0\n",
      "<=50K    76.0\n",
      "Name: income, dtype: float64\n",
      "**************************************************\n"
     ]
    }
   ],
   "source": [
    "#calculating the frequency of each categorical value\n",
    "print('Frequencies of the categorical values')\n",
    "print('*' * 50)\n",
    "print('*' * 50)\n",
    "print('*' * 50)\n",
    "for col in census:\n",
    "    if census[col].dtypes == 'object': #if the data type of the object is an object(string)\n",
    "        colum_unique_values = census[col].value_counts(normalize = True, #show in percentage\n",
    "                                                 sort = True, #sort the values \n",
    "                                                 ascending = True).round(decimals = 2)*100 #roung the values\n",
    "        print(colum_unique_values)\n",
    "        print('*' * 50)\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bfe3beb",
   "metadata": {},
   "source": [
    "### Treating  missing values by first isolating them into new columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d197b4fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sums of Missing Value Flags\n",
      "--------------------------\n",
      "m_job                1475\n",
      "m_type_employment    1469\n",
      "m_nationality         472\n",
      "dtype: int64 \n",
      "There are 1928 rows with at least one blank value\n",
      "\n",
      "Number of Missing Values per Observation (%)\n",
      "----------------------------------------------\n",
      "3     0.07\n",
      "1     1.62\n",
      "2     5.11\n",
      "0    93.21\n",
      "Name: mv_sum, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#making a loop to create a column that store when there is a missing value \n",
    "for col in census:\n",
    "    #analysing what column has missing value\n",
    "    if census[col].isnull().sum() > 0: \n",
    "        #creating the \"m\" column with 1 and 0\n",
    "        census['m_' + col] = census[col].isnull().astype(int)\n",
    "        #print(f\"\"\"m_{col} = {census['m_' + col].sum()}\"\"\")\n",
    "#declaring the column that is going to store the addition of the \"m\" columns\n",
    "census['mv_sum'] = 0\n",
    "\n",
    "#creating a loop to store the sum of the missing values\n",
    "for col in census:\n",
    "    if col[:2] == 'm_':   #if the first two characters of the name of the column is \"_m\" then add to the sum\n",
    "        census['mv_sum'] = census[col] + census['mv_sum']\n",
    "#printing the sum of mising value for each \"m\" column\n",
    "print(f\"\"\"\n",
    "Sums of Missing Value Flags\n",
    "--------------------------\n",
    "{census.iloc[ : , -4:-1 ].sum(axis = 0)} \n",
    "There are {sum(census['mv_sum'] > 0)} rows with at least one blank value\"\"\")\n",
    "\n",
    "#y = pd.Dataframe.copy(census)\n",
    "print(f\"\"\"\n",
    "Number of Missing Values per Observation (%)\n",
    "----------------------------------------------\n",
    "{(census['mv_sum'].value_counts(normalize = True,\n",
    "                                  sort      = True,\n",
    "                                  ascending = True)*100).round(2)}\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c24f65f",
   "metadata": {},
   "source": [
    "### Treating missing values by assigning them a \"value\", to incorporate them in analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2be1d394",
   "metadata": {
    "code_folding": []
   },
   "outputs": [],
   "source": [
    "#thresshold to know what mean \n",
    "#making a loop to fill the missing values\n",
    "for col in census:\n",
    "    #making a if statement to know if the column is an integer\n",
    "    if census[col].isnull().sum() > 0 and census[col].dtypes == 'int64':\n",
    "        #calculating the median of the column\n",
    "        median = census[col].median()\n",
    "        #calculating the mean of the column\n",
    "        mean = census[col].mean()\n",
    "        #making a if statement to know the skewness of the distribution\n",
    "        if median < mean:\n",
    "            #function to fill the missing values with the median\n",
    "            census[col].fillna(value = median,\n",
    "                         inplace = True)\n",
    "        else:\n",
    "            #function to fill the missing values with the mean\n",
    "            census[col].fillna(value = mean,\n",
    "                              inplace = True)\n",
    "            \n",
    "    #analysing if the column is an object\n",
    "    elif census[col].isnull().sum() > 0 and census[col].dtypes == 'object':\n",
    "        #calculating the mode\n",
    "        mode = census[col].mode()\n",
    "        #print(mode)\n",
    "        #function to fill the missing values with the mode\n",
    "        census [col].fillna(value = mode[0],\n",
    "                     inplace = True)\n",
    "        #print(y[col].isnull().any())\n",
    "    else: \n",
    "        #continue\n",
    "        continue\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0e59008",
   "metadata": {},
   "source": [
    "### Checking the new values of the once missing values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28976d12",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  job  m_job\n",
      "46     Prof-specialty      1\n",
      "62     Prof-specialty      1\n",
      "105    Prof-specialty      1\n",
      "108    Prof-specialty      1\n",
      "110    Prof-specialty      1\n",
      "...               ...    ...\n",
      "28314  Prof-specialty      1\n",
      "28328  Prof-specialty      1\n",
      "28360  Prof-specialty      1\n",
      "28365  Prof-specialty      1\n",
      "28376  Prof-specialty      1\n",
      "\n",
      "[1475 rows x 2 columns]\n",
      "****************************************************************************************************\n",
      "      type_employment  m_type_employment\n",
      "46            Private                  1\n",
      "62            Private                  1\n",
      "105           Private                  1\n",
      "108           Private                  1\n",
      "110           Private                  1\n",
      "...               ...                ...\n",
      "28314         Private                  1\n",
      "28328         Private                  1\n",
      "28360         Private                  1\n",
      "28365         Private                  1\n",
      "28376         Private                  1\n",
      "\n",
      "[1469 rows x 2 columns]\n",
      "****************************************************************************************************\n",
      "         nationality  m_nationality\n",
      "155    United-States              1\n",
      "216    United-States              1\n",
      "286    United-States              1\n",
      "299    United-States              1\n",
      "301    United-States              1\n",
      "...              ...            ...\n",
      "28077  United-States              1\n",
      "28175  United-States              1\n",
      "28186  United-States              1\n",
      "28249  United-States              1\n",
      "28299  United-States              1\n",
      "\n",
      "[472 rows x 2 columns]\n",
      "****************************************************************************************************\n"
     ]
    }
   ],
   "source": [
    "#making a loop to know what is the mode or median that was store at each column\n",
    "for col in census:\n",
    "    #if the column start with \"m_\"\n",
    "     if col[:2] == 'm_':\n",
    "            #replacing the first two characters of the column to convoke the normal column\n",
    "            ncol = col[2:]\n",
    "            #print the filter when the missing values is one\n",
    "            print(census.loc[:, [ncol, col]][census.loc [:, col]== 1])\n",
    "            print('*' * 100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86536859",
   "metadata": {},
   "source": [
    "### Creation of new dataframe by copying the actual one, census,  with all once missing values being treated. This new dataframe will be used for further data analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5a8f9bcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = pd.DataFrame.copy(census)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c3c9e3e6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>workinghours_week</th>\n",
       "      <th>capital_gain_loss</th>\n",
       "      <th>years_education</th>\n",
       "      <th>m_job</th>\n",
       "      <th>m_type_employment</th>\n",
       "      <th>m_nationality</th>\n",
       "      <th>mv_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>28386.000000</td>\n",
       "      <td>28386.000000</td>\n",
       "      <td>28386.000000</td>\n",
       "      <td>28386.000000</td>\n",
       "      <td>28386.000000</td>\n",
       "      <td>28386.000000</td>\n",
       "      <td>28386.000000</td>\n",
       "      <td>28386.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>38.545621</td>\n",
       "      <td>40.494575</td>\n",
       "      <td>1020.126224</td>\n",
       "      <td>10.075812</td>\n",
       "      <td>0.051962</td>\n",
       "      <td>0.051751</td>\n",
       "      <td>0.016628</td>\n",
       "      <td>0.120341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13.585550</td>\n",
       "      <td>12.375269</td>\n",
       "      <td>7598.986298</td>\n",
       "      <td>2.573512</td>\n",
       "      <td>0.221955</td>\n",
       "      <td>0.221528</td>\n",
       "      <td>0.127875</td>\n",
       "      <td>0.460484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-4356.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>28.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>37.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99999.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age  workinghours_week  capital_gain_loss  years_education  \\\n",
       "count  28386.000000       28386.000000       28386.000000     28386.000000   \n",
       "mean      38.545621          40.494575        1020.126224        10.075812   \n",
       "std       13.585550          12.375269        7598.986298         2.573512   \n",
       "min       17.000000           1.000000       -4356.000000         1.000000   \n",
       "25%       28.000000          40.000000           0.000000         9.000000   \n",
       "50%       37.000000          40.000000           0.000000        10.000000   \n",
       "75%       47.000000          45.000000           0.000000        12.000000   \n",
       "max       90.000000          99.000000       99999.000000        16.000000   \n",
       "\n",
       "              m_job  m_type_employment  m_nationality        mv_sum  \n",
       "count  28386.000000       28386.000000   28386.000000  28386.000000  \n",
       "mean       0.051962           0.051751       0.016628      0.120341  \n",
       "std        0.221955           0.221528       0.127875      0.460484  \n",
       "min        0.000000           0.000000       0.000000      0.000000  \n",
       "25%        0.000000           0.000000       0.000000      0.000000  \n",
       "50%        0.000000           0.000000       0.000000      0.000000  \n",
       "75%        0.000000           0.000000       0.000000      0.000000  \n",
       "max        1.000000           1.000000       1.000000      3.000000  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a76b79f0",
   "metadata": {
    "cell_style": "split"
   },
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 8)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<tokenize>\"\u001b[1;36m, line \u001b[1;32m8\u001b[0m\n\u001b[1;33m    color = 'red')\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "#declaring a variable that will store a column of the data set\n",
    "age_census = y.loc[:,'age'][census.loc[:,'income']== '>50K']\n",
    "fg, ax = plt.subplots(figsize = (6,5),\n",
    "                     sharex = True,\n",
    "                     sharey = True)\n",
    "                bins = 'fd',\n",
    "                kde = True,\n",
    "               color = 'red')\n",
    "sns.histplot ( data = y,\n",
    "                x = 'age',\n",
    "                bins = 'fd',\n",
    "                kde = True,\n",
    "               color = 'grey')\n",
    "# formatting and displaying the plot\n",
    "plt.title (\"\"\"Chart 1:\n",
    "Distribution of age vs people who win more than 50K\"\"\")\n",
    "plt.xlabel ( 'age')\n",
    "plt.ylabel('frequency')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5bce9a6",
   "metadata": {
    "cell_style": "split"
   },
   "outputs": [],
   "source": [
    "#declaring a variable that will store a column of the data set\n",
    "age_census = y.loc[:,'workinghours_week'][census.loc[:,'income']== '>50K']\n",
    "fg, ax = plt.subplots(figsize = (6,5))\n",
    "\n",
    "sns.violinplot(x = 'income',\n",
    "               y = 'workinghours_week',\n",
    "               split = True,\n",
    "               data = y,\n",
    "               orient = 'v')\n",
    "\n",
    "\n",
    "\n",
    "# formatting and displaying the plot\n",
    "plt.title(label = \"\"\"Chart 2:\n",
    "Violin Plots between income and working hours\n",
    "\"\"\")\n",
    "plt.xlabel(xlabel = 'Income')\n",
    "plt.ylabel(ylabel = 'working hours')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99949a64",
   "metadata": {
    "cell_style": "center"
   },
   "source": [
    "Chart 1: Age seems to has a normal distribution that is skew to the right, although the distribution of the people who earns more than 50K seem to be more normal distribution and it is concentrated between people of 38 and 48 years old. Moreover, while there are fewer percentage of younger people who earns more than 50K than the percentage of the older people. This fact could be because younger people has to gain experience or finish more studies in order to be promoted. Therefore, age is an important variable to determine if a person could win more than 50K."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a1ef541",
   "metadata": {
    "cell_style": "center"
   },
   "source": [
    "Chart 2: working hours does not seem to has an extreme difference but it observable that people there are higher concentration of people who earns more than 50K above the 40 hours. This observation can tell us that people who earns more than 50K make a higher effort to earn more than 50K. However, this case is not in the 100% of the people and it seem to be that the kind of job can have a better impact on the income of a person."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb744f9",
   "metadata": {},
   "source": [
    "### Mapping variables due to abundance of categorical values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c6f7d379",
   "metadata": {},
   "outputs": [],
   "source": [
    "#mapping the level_education variable because there is too many categorical values\n",
    "y['level_education'] = y['level_education'].map ( {'Preschool'        : \"preschool\",\n",
    "                                                   '1st-4th'          : \"no_school_grad\",\n",
    "                                                    '5th-6th'          : \"no_school_grad\",\n",
    "                                                    'Doctorate'        : \"doctorate\",\n",
    "                                                    '12th'             : \"no_school_grad\",\n",
    "                                                    '9th'              : \"no_school_grad\",\n",
    "                                                    'Prof-school'      : \"prof_school\",\n",
    "                                                    '7th-8th'          : \"no_school_grad\",\n",
    "                                                    '10th'             : \"no_school_grad\",\n",
    "                                                    'Assoc-acdm'       : \"associate\",\n",
    "                                                    '11th'             : \"school\",\n",
    "                                                    'Assoc-voc'        : \"associate\",\n",
    "                                                    'Masters'          : \"master\",\n",
    "                                                    'Bachelors'        : \"university\",\n",
    "                                                    'Some-college'     : \"university_incom\",\n",
    "                                                    'HS-grad'          : \"school_grad\"})\n",
    "#making a map of the income \n",
    "\n",
    "y['income'] = y['income'].map ( {'>50K'   : 1,\n",
    "                                 '<=50K'  : 0})\n",
    "\n",
    "# for loop with iterrows() \n",
    "for index, col in y.iterrows():\n",
    "    # conditionals to change the values in the new column\n",
    "    #if capital gain is less than 0\n",
    "    if y.loc[index, 'capital_gain_loss'] < 0:\n",
    "        y.loc[index, 'capital_gain_loss'] = 'loss'\n",
    "    #if capital gain is equal to 0  \n",
    "    elif y.loc[index, 'capital_gain_loss'] == 0:\n",
    "        y.loc[index, 'capital_gain_loss'] = 'cero'\n",
    "    #if capital gain is more than 0\n",
    "    elif y.loc[index, 'capital_gain_loss'] > 0:\n",
    "        y.loc[index, 'capital_gain_loss'] = 'gain'\n",
    "    #safe if statement\n",
    "    else:\n",
    "        y.loc[index, 'capital_gain_loss'] = 'error' \n",
    "\n",
    "# for loop with iterrows()\n",
    "for index, col in y.iterrows():\n",
    "    # conditionals to change the values in the new column\n",
    "    #less than 25\n",
    "    if y.loc[index, 'age'] < 28:\n",
    "        y.loc[index, 'age'] = '[0 - 27)'\n",
    "    #less than 40 and more than 25 is middle age    \n",
    "    elif y.loc[index, 'age'] < 37:\n",
    "        y.loc[index, 'age'] = '[28 - 37)'\n",
    "        \n",
    "     #less than 60 and more than 40 is senior    \n",
    "    elif y.loc[index, 'age'] < 47:\n",
    "        y.loc[index, 'age'] = '[47 - 60]'\n",
    "        \n",
    "    #more than 60 is old     \n",
    "    elif y.loc[index, 'age'] >= 60:\n",
    "        y.loc[index, 'age'] = '[60 - +)'\n",
    "    # safety net\n",
    "    else:\n",
    "        y.loc[index, 'age'] = 'error'    \n",
    "    #modifying the column of nationality\n",
    "# for loop with iterrows()\n",
    "for index, col in y.iterrows():\n",
    "    # conditionals to change the values in the new column\n",
    "    #less than 25\n",
    "    if y.loc[index, 'workinghours_week'] < 20:\n",
    "        y.loc[index, 'workinghours_week'] = '[0 - 20)'\n",
    "    #less than 40 and more than 25 is middle age    \n",
    "    elif y.loc[index, 'workinghours_week'] < 40:\n",
    "        y.loc[index, 'workinghours_week'] = '[20 - 39)'\n",
    "        \n",
    "     #less than 60 and more than 40 is senior    \n",
    "    elif y.loc[index, 'workinghours_week'] < 50:\n",
    "        y.loc[index, 'workinghours_week'] = '[40 - 49]'\n",
    "        \n",
    "    #more than 60 is old     \n",
    "    elif y.loc[index, 'workinghours_week'] >= 50:\n",
    "        y.loc[index, 'workinghours_week'] = '[50 - +)'\n",
    "    # safety net\n",
    "    else:\n",
    "        y.loc[index, 'workinghours_week'] = 'error'\n",
    "        \n",
    "for index, col in y.iterrows():\n",
    "    # conditionals to change the values in the new column\n",
    "    #less than 25\n",
    "    if y.loc[index, 'years_education'] < 9:\n",
    "        y.loc[index, 'years_education'] = '[0 - 8)'\n",
    "    #less than 40 and more than 25 is middle age    \n",
    "    elif y.loc[index, 'years_education'] < 11:\n",
    "        y.loc[index, 'years_education'] = '[9 - 10)'\n",
    "        \n",
    "     #less than 60 and more than 40 is senior    \n",
    "    elif y.loc[index, 'years_education'] < 13:\n",
    "        y.loc[index, 'years_education'] = '[10 - 12]'\n",
    "        \n",
    "    #more than 60 is old     \n",
    "    elif y.loc[index, 'years_education'] >= 13:\n",
    "        y.loc[index, 'years_education'] = '[13 - +)'\n",
    "    # safety net\n",
    "    else:\n",
    "        y.loc[index, 'years_education'] = 'error'   \n",
    "    #modifying the column of nationality\n",
    "for index, col in y.iterrows():\n",
    "    #checking if is US\n",
    "    if y.loc[index, 'nationality'] == 'United-States':\n",
    "        y.loc[index, 'nationality'] = 'United-States'\n",
    "    #checking if is Philippines\n",
    "    elif y.loc[index, 'nationality'] == 'Philippines':\n",
    "        y.loc[index, 'nationality'] = 'Philippines'\n",
    "    #cheking if is Mexico\n",
    "    elif  y.loc[index, 'nationality'] == 'Mexico':\n",
    "        y.loc[index, 'nationality'] = 'Mexico'\n",
    "    #the rest of the countries are going to be store as \"Rest\"\n",
    "    else:\n",
    "        y.loc[index, 'nationality'] = 'Rest'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "50f7462c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'job', 'type_employment', 'workinghours_week',\n",
       "       'capital_gain_loss', 'level_education', 'years_education',\n",
       "       'civil_status', 'relationship', 'ethnicity', 'gender', 'nationality',\n",
       "       'income', 'm_job', 'm_type_employment', 'm_nationality', 'mv_sum'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dac4f5cb",
   "metadata": {},
   "source": [
    "### Storing categorical variables as dummy variables to ease data analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8993fd38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>income</th>\n",
       "      <th>m_job</th>\n",
       "      <th>m_type_employment</th>\n",
       "      <th>m_nationality</th>\n",
       "      <th>mv_sum</th>\n",
       "      <th>age_[0 - 27)</th>\n",
       "      <th>age_[28 - 37)</th>\n",
       "      <th>age_[47 - 60]</th>\n",
       "      <th>age_[60 - +)</th>\n",
       "      <th>age_error</th>\n",
       "      <th>...</th>\n",
       "      <th>ethnicity_Asian-Pac-Islander</th>\n",
       "      <th>ethnicity_Black</th>\n",
       "      <th>ethnicity_Other</th>\n",
       "      <th>ethnicity_White</th>\n",
       "      <th>gender_Female</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>nationality_Mexico</th>\n",
       "      <th>nationality_Philippines</th>\n",
       "      <th>nationality_Rest</th>\n",
       "      <th>nationality_United-States</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 77 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   income  m_job  m_type_employment  m_nationality  mv_sum  age_[0 - 27)  \\\n",
       "0       0      0                  0              0       0             0   \n",
       "1       0      0                  0              0       0             0   \n",
       "2       0      0                  0              0       0             1   \n",
       "3       0      0                  0              0       0             0   \n",
       "4       0      0                  0              0       0             0   \n",
       "\n",
       "   age_[28 - 37)  age_[47 - 60]  age_[60 - +)  age_error  ...  \\\n",
       "0              1              0             0          0  ...   \n",
       "1              0              0             0          1  ...   \n",
       "2              0              0             0          0  ...   \n",
       "3              0              1             0          0  ...   \n",
       "4              0              0             0          1  ...   \n",
       "\n",
       "   ethnicity_Asian-Pac-Islander  ethnicity_Black  ethnicity_Other  \\\n",
       "0                             0                0                1   \n",
       "1                             0                0                0   \n",
       "2                             0                0                0   \n",
       "3                             0                0                0   \n",
       "4                             0                0                0   \n",
       "\n",
       "   ethnicity_White  gender_Female  gender_Male  nationality_Mexico  \\\n",
       "0                0              0            1                   1   \n",
       "1                1              1            0                   0   \n",
       "2                1              0            1                   0   \n",
       "3                1              0            1                   0   \n",
       "4                1              0            1                   0   \n",
       "\n",
       "   nationality_Philippines  nationality_Rest  nationality_United-States  \n",
       "0                        0                 0                          0  \n",
       "1                        0                 0                          1  \n",
       "2                        0                 0                          1  \n",
       "3                        0                 0                          1  \n",
       "4                        0                 0                          1  \n",
       "\n",
       "[5 rows x 77 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#declaring a variable that is going to store the y variable\n",
    "n_census = y\n",
    "#making a loop to create the dummy variables\n",
    "for col in y:\n",
    "    #if the count values is less than 14 unique values and is an object\n",
    "    if len(y[col].value_counts()) <= 14 and y[col].dtypes == 'object':\n",
    "        #create the dummy variable without eliminating a column\n",
    "        n_census = pd.get_dummies(data = n_census, columns = [col])\n",
    "                            #drop_first = True)\n",
    "#pd.get_dummies(data = census, columns = ['level_education'], drop_first = True)\n",
    "#adding the created columns to the y dataframe    \n",
    "y = n_census\n",
    "y.head(n = 5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "26d94b00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 28386 entries, 0 to 28385\n",
      "Data columns (total 77 columns):\n",
      " #   Column                              Non-Null Count  Dtype\n",
      "---  ------                              --------------  -----\n",
      " 0   income                              28386 non-null  int64\n",
      " 1   m_job                               28386 non-null  int32\n",
      " 2   m_type_employment                   28386 non-null  int32\n",
      " 3   m_nationality                       28386 non-null  int32\n",
      " 4   mv_sum                              28386 non-null  int64\n",
      " 5   age_[0 - 27)                        28386 non-null  uint8\n",
      " 6   age_[28 - 37)                       28386 non-null  uint8\n",
      " 7   age_[47 - 60]                       28386 non-null  uint8\n",
      " 8   age_[60 - +)                        28386 non-null  uint8\n",
      " 9   age_error                           28386 non-null  uint8\n",
      " 10  job_Adm-clerical                    28386 non-null  uint8\n",
      " 11  job_Armed-Forces                    28386 non-null  uint8\n",
      " 12  job_Craft-repair                    28386 non-null  uint8\n",
      " 13  job_Exec-managerial                 28386 non-null  uint8\n",
      " 14  job_Farming-fishing                 28386 non-null  uint8\n",
      " 15  job_Handlers-cleaners               28386 non-null  uint8\n",
      " 16  job_Machine-op-inspct               28386 non-null  uint8\n",
      " 17  job_Other-service                   28386 non-null  uint8\n",
      " 18  job_Priv-house-serv                 28386 non-null  uint8\n",
      " 19  job_Prof-specialty                  28386 non-null  uint8\n",
      " 20  job_Protective-serv                 28386 non-null  uint8\n",
      " 21  job_Sales                           28386 non-null  uint8\n",
      " 22  job_Tech-support                    28386 non-null  uint8\n",
      " 23  job_Transport-moving                28386 non-null  uint8\n",
      " 24  type_employment_Federal-gov         28386 non-null  uint8\n",
      " 25  type_employment_Local-gov           28386 non-null  uint8\n",
      " 26  type_employment_Never-worked        28386 non-null  uint8\n",
      " 27  type_employment_Private             28386 non-null  uint8\n",
      " 28  type_employment_Self-emp-inc        28386 non-null  uint8\n",
      " 29  type_employment_Self-emp-not-inc    28386 non-null  uint8\n",
      " 30  type_employment_State-gov           28386 non-null  uint8\n",
      " 31  type_employment_Without-pay         28386 non-null  uint8\n",
      " 32  workinghours_week_[0 - 20)          28386 non-null  uint8\n",
      " 33  workinghours_week_[20 - 39)         28386 non-null  uint8\n",
      " 34  workinghours_week_[40 - 49]         28386 non-null  uint8\n",
      " 35  workinghours_week_[50 - +)          28386 non-null  uint8\n",
      " 36  capital_gain_loss_cero              28386 non-null  uint8\n",
      " 37  capital_gain_loss_gain              28386 non-null  uint8\n",
      " 38  capital_gain_loss_loss              28386 non-null  uint8\n",
      " 39  level_education_associate           28386 non-null  uint8\n",
      " 40  level_education_doctorate           28386 non-null  uint8\n",
      " 41  level_education_master              28386 non-null  uint8\n",
      " 42  level_education_no_school_grad      28386 non-null  uint8\n",
      " 43  level_education_preschool           28386 non-null  uint8\n",
      " 44  level_education_prof_school         28386 non-null  uint8\n",
      " 45  level_education_school              28386 non-null  uint8\n",
      " 46  level_education_school_grad         28386 non-null  uint8\n",
      " 47  level_education_university          28386 non-null  uint8\n",
      " 48  level_education_university_incom    28386 non-null  uint8\n",
      " 49  years_education_[0 - 8)             28386 non-null  uint8\n",
      " 50  years_education_[10 - 12]           28386 non-null  uint8\n",
      " 51  years_education_[13 - +)            28386 non-null  uint8\n",
      " 52  years_education_[9 - 10)            28386 non-null  uint8\n",
      " 53  civil_status_Divorced               28386 non-null  uint8\n",
      " 54  civil_status_Married-AF-spouse      28386 non-null  uint8\n",
      " 55  civil_status_Married-civ-spouse     28386 non-null  uint8\n",
      " 56  civil_status_Married-spouse-absent  28386 non-null  uint8\n",
      " 57  civil_status_Never-married          28386 non-null  uint8\n",
      " 58  civil_status_Separated              28386 non-null  uint8\n",
      " 59  civil_status_Widowed                28386 non-null  uint8\n",
      " 60  relationship_Husband                28386 non-null  uint8\n",
      " 61  relationship_Not-in-family          28386 non-null  uint8\n",
      " 62  relationship_Other-relative         28386 non-null  uint8\n",
      " 63  relationship_Own-child              28386 non-null  uint8\n",
      " 64  relationship_Unmarried              28386 non-null  uint8\n",
      " 65  relationship_Wife                   28386 non-null  uint8\n",
      " 66  ethnicity_Amer-Indian-Eskimo        28386 non-null  uint8\n",
      " 67  ethnicity_Asian-Pac-Islander        28386 non-null  uint8\n",
      " 68  ethnicity_Black                     28386 non-null  uint8\n",
      " 69  ethnicity_Other                     28386 non-null  uint8\n",
      " 70  ethnicity_White                     28386 non-null  uint8\n",
      " 71  gender_Female                       28386 non-null  uint8\n",
      " 72  gender_Male                         28386 non-null  uint8\n",
      " 73  nationality_Mexico                  28386 non-null  uint8\n",
      " 74  nationality_Philippines             28386 non-null  uint8\n",
      " 75  nationality_Rest                    28386 non-null  uint8\n",
      " 76  nationality_United-States           28386 non-null  uint8\n",
      "dtypes: int32(3), int64(2), uint8(72)\n",
      "memory usage: 2.7 MB\n"
     ]
    }
   ],
   "source": [
    "y.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89db9289",
   "metadata": {},
   "source": [
    "### Setting training and testing data to..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b9109b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# preparing explanatory variable data\n",
    "census_data   = y.drop(['income'], axis = 1)\n",
    "\n",
    "\n",
    "# preparing response variable data\n",
    "census_target = y.loc[ : , 'income']\n",
    "\n",
    "\n",
    "# preparing training and testing sets (all letters are lowercase)\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "            census_data,\n",
    "            census_target,\n",
    "            test_size = 0.20,\n",
    "            random_state = 1223)\n",
    "\n",
    "\n",
    "# checking the shapes of the datasets\n",
    "print(f\"\"\"\n",
    "Training Data\n",
    "-------------\n",
    "X-side: {x_train.shape}\n",
    "y-side: {y_train.shape[0]}\n",
    "\n",
    "\n",
    "Testing Data\n",
    "------------\n",
    "X-side: {x_test.shape}\n",
    "y-side: {y_test.shape[0]}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81efb51b",
   "metadata": {},
   "source": [
    "### Merging training data x and y, and testing data x and y, in order to use  statsmodels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa9ca7fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# merging x_train and y_train so that they can be used in statsmodels\n",
    "census_train = pd.concat([x_train, y_train], axis = 1)\n",
    "\n",
    "# merging x_test and y_test so that they can be used in statsmodels\n",
    "census_test = pd.concat([x_test, y_test], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5f8e6c1",
   "metadata": {},
   "source": [
    "### Saving Testing and Training sets as excel files. Data have been cleaned and are ready for further analysis in Excel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5899d951",
   "metadata": {},
   "outputs": [],
   "source": [
    "# saving the training set as an Excel file\n",
    "census_train.to_excel(excel_writer = \".census_train.xlsx\",\n",
    "                        index        = False)\n",
    "# saving the testing set as an Excel file\n",
    "census_test.to_excel(excel_writer = \"census_test.xlsx\",\n",
    "                       index        = False)\n"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "320px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
